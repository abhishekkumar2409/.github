#This is a Kohls-pov workflow for springboot-demo application with Github Actions

name: Springboot-demo (CI-CD)

# Controls when the action will run. Triggers the workflow on push or pull request
on:
  push:
    branches:    
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      - '!master'   # excludes master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  # Checkmarx
  Checkmarx-SAST-Scan:
    runs-on: ${{ runson }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: CP checkmarx cli
        run: cp -R /var/tmp/tools/cxcli/cxcli ${{ github.workspace }}
      - name: Checkmarx Action
        uses: checkmarx-ts/checkmarx-github-action@v1.0.3
        with:
          cxServer: https://nwc00854.cp.ad.kohls.com/CxWebClient
          cxAction: Scan
          cxToken: ${{ secrets.CX_TOKEN }}
          cxTeam: \CxServer\Kohls\Kohls\CPE
          cxVerbose: true
          cxProject: CPE_GHE_Springboot_Demo
          cxPreset: "Kohls - Standalone - Java"
          cxOsaLocationPath: ${{ github.workspace }}
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: cx.sarif

  # Generate Build Number #
  Build-Number:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      buildnumber: ${{ steps.buildnumber.outputs.buildnumber }}   
    steps:
    - name: Generate build number
      uses: einaregilsson/build-number@v3
      with:
        token: ${{secrets.github_token}}
    - id: buildnumber
      run: echo "::set-output name=buildnumber::$BUILD_NUMBER" 

  # Super Lint
  Linting:
    runs-on: ubuntu-latest
    needs: [Build-Number]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Run Linter against code base
      - name: Lint Code Base
        uses: github/super-linter@v3
        env:
          VALIDATE_ALL_CODEBASE: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build n' Deploy
  CICD:
    # The type of runner that the job will run on
    runs-on: devexp
    needs: [Build-Number,Linting]
    env:
     BUILD_NUMBER: ${{needs.Build-Number.outputs.buildnumber}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - run: echo ${{needs.Build-Number.outputs.buildnumber}}
      # Let's get secrets  
      - name: Import Secrets from HashiCorp Vault
        uses: hashicorp/vault-action@v2.1.0
        with:
         url: ${{ secrets.VAULT_PRD_URL }}
         method: approle
         roleId: ${{ secrets.VAULT_ROLEID }}
         secretId: ${{ secrets.VAULT_SECRETID }}
         tlsSkipVerify: true
         secrets: |
            kv-cpe/data/devexp/cicd/nexus user | NEXUS_USER ;
            kv-cpe/data/devexp/cicd/nexus password | NEXUS_PASSWORD ;
            kv-cpe/data/devexp/cicd/openshift api-gcpusc1-d-sbx-xpaas-kohls-com | OPENSHIFT_API_TOKEN ;
            kv-cpe/data/devexp/cicd/openshift default-route-openshift-image-registry-apps-gcpusc1-d-sbx-xpaas-kohls-com | DOCKER_TOKEN ;
            kv-cpe/data/devexp/cicd/sonar token | SONAR_TOKEN ;
            kv-cpe/data/devexp/cicd/github kohls_pov_token_pat | GIT_HUB_TOKEN_PP ;
            kv-sec/data/security/PrismaCloud_Compute/CICD/Console accesskey | ACCESS_KEY ;
            kv-sec/data/security/PrismaCloud_Compute/CICD/Console secretkey | SECRET_KEY ;
          
      # Maven build
      - name: maven build
        run: mvn clean deploy -Dmaven.test.skip=true -gs settings.xml
      # Sonar scan via mvn plugin
      - name: Sonar Scan
        run: mvn verify sonar:sonar -Dsonar.host.url=http://sonarqube-demo-springboot-demo.apps.gcpusc1-d.sbx.xpaas.kohls.com -Dsonar.login=$SONAR_TOKEN -gs settings.xml
        
      # Login to OpenShift Docker Registry #
      - name: Login to OpenShift Docker Registry
        uses: docker/login-action@v1
        with:
          registry: default-route-openshift-image-registry.apps.gcpusc1-d.sbx.xpaas.kohls.com
          username: ${{ github.repository_owner }}
          password: ${{ env.DOCKER_TOKEN }}

      # Docker Build
      - name: Docker Build
        run: |
          docker build -t springboot . 
          docker tag springboot default-route-openshift-image-registry.apps.gcpusc1-d.sbx.xpaas.kohls.com/cpe-backstage-dev/springboot:$BUILD_NUMBER
      
      # Checkout PrismaCloud Action repo
      - uses: actions/checkout@v2-beta
        with:
          token: "${{ env.GIT_HUB_TOKEN_PP }}"
          repository: kohls-pov/kohls-prismacloud-compute-action
          path: ./action
      
      # Scan image
      - name: PrismaCloud Scan
        uses: ./action
        with:
          image: springboot
          accesskey: ${{ env.ACCESS_KEY }}
          secretkey: ${{ env.SECRET_KEY }}
      
      # Docker Push
      - name: Docker Push
        run: |
          docker push default-route-openshift-image-registry.apps.gcpusc1-d.sbx.xpaas.kohls.com/cpe-backstage-dev/springboot:$BUILD_NUMBER
      
      # Authenticate to OpenShift Cluster
      - name: Authenticate with OpenShift Cluster
        run: oc login --token=$OPENSHIFT_API_TOKEN --server=https://api.gcpusc1-d.sbx.xpaas.kohls.com:6443

      - uses: actions/checkout@v2
        with:
          repository: kohls-pov/kohls-helm-action
          token: ${{ env.GIT_HUB_TOKEN_PP }} # `GIT_HUB_TOKEN_PP` is a vault secret that contains github Private Acces Token (PAT)
          path: .github/actions

      - name: Run Helm Action
        uses: ./.github/actions
        with:
          release-name: "first-release"
          nexus-user: "${{ env.NEXUS_USER }}"
          nexus-password: "${{ env.NEXUS_PASSWORD }}"
          namespace: "cpe-backstage-dev"
          values-overrides: '{"values": {"imagenamespace": "cpe-backstage-dev", "ocpRegistry": "image-registry.openshift-image-registry.svc:5000", "imageTag": "${{ env.BUILD_NUMBER }}", "startupScript": "java -jar /apps/application.jar"}}'

